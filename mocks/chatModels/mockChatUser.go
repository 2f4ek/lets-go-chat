// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/chatModels/chatUser.go

// Package mock_chatModels is a generated GoMock package.
package mock_chatModels

import (
	reflect "reflect"

	models "github.com/2f4ek/lets-go-chat/internal/models"
	gomock "github.com/golang/mock/gomock"
)

// MockIChatUser is a mock of IChatUser interface.
type MockIChatUser struct {
	ctrl     *gomock.Controller
	recorder *MockIChatUserMockRecorder
}

// MockIChatUserMockRecorder is the mock recorder for MockIChatUser.
type MockIChatUserMockRecorder struct {
	mock *MockIChatUser
}

// NewMockIChatUser creates a new mock instance.
func NewMockIChatUser(ctrl *gomock.Controller) *MockIChatUser {
	mock := &MockIChatUser{ctrl: ctrl}
	mock.recorder = &MockIChatUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIChatUser) EXPECT() *MockIChatUserMockRecorder {
	return m.recorder
}

// GetUserId mocks base method.
func (m *MockIChatUser) GetUserId() models.UserId {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserId")
	ret0, _ := ret[0].(models.UserId)
	return ret0
}

// GetUserId indicates an expected call of GetUserId.
func (mr *MockIChatUserMockRecorder) GetUserId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserId", reflect.TypeOf((*MockIChatUser)(nil).GetUserId))
}

// ReadMessage mocks base method.
func (m *MockIChatUser) ReadMessage() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReadMessage")
}

// ReadMessage indicates an expected call of ReadMessage.
func (mr *MockIChatUserMockRecorder) ReadMessage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadMessage", reflect.TypeOf((*MockIChatUser)(nil).ReadMessage))
}

// SyncMissedMessages mocks base method.
func (m *MockIChatUser) SyncMissedMessages() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SyncMissedMessages")
}

// SyncMissedMessages indicates an expected call of SyncMissedMessages.
func (mr *MockIChatUserMockRecorder) SyncMissedMessages() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncMissedMessages", reflect.TypeOf((*MockIChatUser)(nil).SyncMissedMessages))
}

// WriteMessage mocks base method.
func (m *MockIChatUser) WriteMessage() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WriteMessage")
}

// WriteMessage indicates an expected call of WriteMessage.
func (mr *MockIChatUserMockRecorder) WriteMessage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteMessage", reflect.TypeOf((*MockIChatUser)(nil).WriteMessage))
}
