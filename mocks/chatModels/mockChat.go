// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/chatModels/chat.go

// Package mock_chatModels is a generated GoMock package.
package mock_chatModels

import (
	reflect "reflect"

	chatModels "github.com/2f4ek/lets-go-chat/internal/chatModels"
	models "github.com/2f4ek/lets-go-chat/internal/models"
	gomock "github.com/golang/mock/gomock"
	websocket "github.com/gorilla/websocket"
)

// MockIChat is a mock of IChat interface.
type MockIChat struct {
	ctrl     *gomock.Controller
	recorder *MockIChatMockRecorder
}

// MockIChatMockRecorder is the mock recorder for MockIChat.
type MockIChatMockRecorder struct {
	mock *MockIChat
}

// NewMockIChat creates a new mock instance.
func NewMockIChat(ctrl *gomock.Controller) *MockIChat {
	mock := &MockIChat{ctrl: ctrl}
	mock.recorder = &MockIChatMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIChat) EXPECT() *MockIChatMockRecorder {
	return m.recorder
}

// AddUserToChat mocks base method.
func (m *MockIChat) AddUserToChat(loginUser *chatModels.LoginUser) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddUserToChat", loginUser)
}

// AddUserToChat indicates an expected call of AddUserToChat.
func (mr *MockIChatMockRecorder) AddUserToChat(loginUser interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUserToChat", reflect.TypeOf((*MockIChat)(nil).AddUserToChat), loginUser)
}

// GetActiveUsers mocks base method.
func (m *MockIChat) GetActiveUsers() map[models.UserId]*chatModels.ChatUser {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveUsers")
	ret0, _ := ret[0].(map[models.UserId]*chatModels.ChatUser)
	return ret0
}

// GetActiveUsers indicates an expected call of GetActiveUsers.
func (mr *MockIChatMockRecorder) GetActiveUsers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveUsers", reflect.TypeOf((*MockIChat)(nil).GetActiveUsers))
}

// LoginUserToChat mocks base method.
func (m *MockIChat) LoginUserToChat(user *models.User, conn *websocket.Conn) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginUserToChat", user, conn)
	ret0, _ := ret[0].(error)
	return ret0
}

// LoginUserToChat indicates an expected call of LoginUserToChat.
func (mr *MockIChatMockRecorder) LoginUserToChat(user, conn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginUserToChat", reflect.TypeOf((*MockIChat)(nil).LoginUserToChat), user, conn)
}

// RemoveUser mocks base method.
func (m *MockIChat) RemoveUser(user *chatModels.ChatUser) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveUser", user)
}

// RemoveUser indicates an expected call of RemoveUser.
func (mr *MockIChatMockRecorder) RemoveUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveUser", reflect.TypeOf((*MockIChat)(nil).RemoveUser), user)
}

// RunChat mocks base method.
func (m *MockIChat) RunChat() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RunChat")
}

// RunChat indicates an expected call of RunChat.
func (mr *MockIChatMockRecorder) RunChat() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunChat", reflect.TypeOf((*MockIChat)(nil).RunChat))
}
