// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/handlers/chatHandler.go

// Package mock_handlers is a generated GoMock package.
package mock_handlers

import (
	reflect "reflect"

	chatModels "github.com/2f4ek/lets-go-chat/internal/chatModels"
	gin "github.com/gin-gonic/gin"
	gomock "github.com/golang/mock/gomock"
)

// MockIChatHandler is a mock of IChatHandler interface.
type MockIChatHandler struct {
	ctrl     *gomock.Controller
	recorder *MockIChatHandlerMockRecorder
}

// MockIChatHandlerMockRecorder is the mock recorder for MockIChatHandler.
type MockIChatHandlerMockRecorder struct {
	mock *MockIChatHandler
}

// NewMockIChatHandler creates a new mock instance.
func NewMockIChatHandler(ctrl *gomock.Controller) *MockIChatHandler {
	mock := &MockIChatHandler{ctrl: ctrl}
	mock.recorder = &MockIChatHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIChatHandler) EXPECT() *MockIChatHandlerMockRecorder {
	return m.recorder
}

// ActiveUsers mocks base method.
func (m *MockIChatHandler) ActiveUsers(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ActiveUsers", c)
}

// ActiveUsers indicates an expected call of ActiveUsers.
func (mr *MockIChatHandlerMockRecorder) ActiveUsers(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActiveUsers", reflect.TypeOf((*MockIChatHandler)(nil).ActiveUsers), c)
}

// InitChat mocks base method.
func (m *MockIChatHandler) InitChat() *chatModels.Chat {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitChat")
	ret0, _ := ret[0].(*chatModels.Chat)
	return ret0
}

// InitChat indicates an expected call of InitChat.
func (mr *MockIChatHandlerMockRecorder) InitChat() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitChat", reflect.TypeOf((*MockIChatHandler)(nil).InitChat))
}

// WsInit mocks base method.
func (m *MockIChatHandler) WsInit(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WsInit", c)
}

// WsInit indicates an expected call of WsInit.
func (mr *MockIChatHandlerMockRecorder) WsInit(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WsInit", reflect.TypeOf((*MockIChatHandler)(nil).WsInit), c)
}
