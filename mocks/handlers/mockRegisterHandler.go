// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/handlers/registerHandler.go

// Package mock_handlers is a generated GoMock package.
package mock_handlers

import (
	reflect "reflect"

	gin "github.com/gin-gonic/gin"
	gomock "github.com/golang/mock/gomock"
)

// MockICreateUserRequest is a mock of ICreateUserRequest interface.
type MockICreateUserRequest struct {
	ctrl     *gomock.Controller
	recorder *MockICreateUserRequestMockRecorder
}

// MockICreateUserRequestMockRecorder is the mock recorder for MockICreateUserRequest.
type MockICreateUserRequestMockRecorder struct {
	mock *MockICreateUserRequest
}

// NewMockICreateUserRequest creates a new mock instance.
func NewMockICreateUserRequest(ctrl *gomock.Controller) *MockICreateUserRequest {
	mock := &MockICreateUserRequest{ctrl: ctrl}
	mock.recorder = &MockICreateUserRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICreateUserRequest) EXPECT() *MockICreateUserRequestMockRecorder {
	return m.recorder
}

// Validate mocks base method.
func (m *MockICreateUserRequest) Validate() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Validate indicates an expected call of Validate.
func (mr *MockICreateUserRequestMockRecorder) Validate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockICreateUserRequest)(nil).Validate))
}

// MockICreateUserResponse is a mock of ICreateUserResponse interface.
type MockICreateUserResponse struct {
	ctrl     *gomock.Controller
	recorder *MockICreateUserResponseMockRecorder
}

// MockICreateUserResponseMockRecorder is the mock recorder for MockICreateUserResponse.
type MockICreateUserResponseMockRecorder struct {
	mock *MockICreateUserResponse
}

// NewMockICreateUserResponse creates a new mock instance.
func NewMockICreateUserResponse(ctrl *gomock.Controller) *MockICreateUserResponse {
	mock := &MockICreateUserResponse{ctrl: ctrl}
	mock.recorder = &MockICreateUserResponseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICreateUserResponse) EXPECT() *MockICreateUserResponseMockRecorder {
	return m.recorder
}

// RegisterUser mocks base method.
func (m *MockICreateUserResponse) RegisterUser(ctx *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterUser", ctx)
}

// RegisterUser indicates an expected call of RegisterUser.
func (mr *MockICreateUserResponseMockRecorder) RegisterUser(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterUser", reflect.TypeOf((*MockICreateUserResponse)(nil).RegisterUser), ctx)
}
