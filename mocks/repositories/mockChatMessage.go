// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/repositories/chatMessage.go

// Package mock_repositories is a generated GoMock package.
package mock_repositories

import (
	reflect "reflect"

	models "github.com/2f4ek/lets-go-chat/internal/models"
	gomock "github.com/golang/mock/gomock"
)

// MockIChatMessageRepository is a mock of IChatMessageRepository interface.
type MockIChatMessageRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIChatMessageRepositoryMockRecorder
}

// MockIChatMessageRepositoryMockRecorder is the mock recorder for MockIChatMessageRepository.
type MockIChatMessageRepositoryMockRecorder struct {
	mock *MockIChatMessageRepository
}

// NewMockIChatMessageRepository creates a new mock instance.
func NewMockIChatMessageRepository(ctrl *gomock.Controller) *MockIChatMessageRepository {
	mock := &MockIChatMessageRepository{ctrl: ctrl}
	mock.recorder = &MockIChatMessageRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIChatMessageRepository) EXPECT() *MockIChatMessageRepositoryMockRecorder {
	return m.recorder
}

// GetMissedMessages mocks base method.
func (m *MockIChatMessageRepository) GetMissedMessages(user *models.User) ([]*models.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMissedMessages", user)
	ret0, _ := ret[0].([]*models.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMissedMessages indicates an expected call of GetMissedMessages.
func (mr *MockIChatMessageRepositoryMockRecorder) GetMissedMessages(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMissedMessages", reflect.TypeOf((*MockIChatMessageRepository)(nil).GetMissedMessages), user)
}

// Save mocks base method.
func (m_2 *MockIChatMessageRepository) Save(m models.Message) (*models.Message, error) {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Save", m)
	ret0, _ := ret[0].(*models.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Save indicates an expected call of Save.
func (mr *MockIChatMessageRepositoryMockRecorder) Save(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockIChatMessageRepository)(nil).Save), m)
}
