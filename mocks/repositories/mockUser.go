// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/repositories/user.go

// Package mock_repositories is a generated GoMock package.
package mock_repositories

import (
	reflect "reflect"

	models "github.com/2f4ek/lets-go-chat/internal/models"
	gomock "github.com/golang/mock/gomock"
)

// MockIUserRepository is a mock of IUserRepository interface.
type MockIUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIUserRepositoryMockRecorder
}

// MockIUserRepositoryMockRecorder is the mock recorder for MockIUserRepository.
type MockIUserRepositoryMockRecorder struct {
	mock *MockIUserRepository
}

// NewMockIUserRepository creates a new mock instance.
func NewMockIUserRepository(ctrl *gomock.Controller) *MockIUserRepository {
	mock := &MockIUserRepository{ctrl: ctrl}
	mock.recorder = &MockIUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUserRepository) EXPECT() *MockIUserRepositoryMockRecorder {
	return m.recorder
}

// AppendUser mocks base method.
func (m *MockIUserRepository) AppendUser(user models.User) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AppendUser", user)
}

// AppendUser indicates an expected call of AppendUser.
func (mr *MockIUserRepositoryMockRecorder) AppendUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendUser", reflect.TypeOf((*MockIUserRepository)(nil).AppendUser), user)
}

// CreateUser mocks base method.
func (m *MockIUserRepository) CreateUser(userName, userPassword string) (*models.User, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", userName, userPassword)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockIUserRepositoryMockRecorder) CreateUser(userName, userPassword interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockIUserRepository)(nil).CreateUser), userName, userPassword)
}

// GetUser mocks base method.
func (m *MockIUserRepository) GetUser(userName string) (*models.User, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", userName)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockIUserRepositoryMockRecorder) GetUser(userName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockIUserRepository)(nil).GetUser), userName)
}

// GetUserByToken mocks base method.
func (m *MockIUserRepository) GetUserByToken(token string) *models.User {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByToken", token)
	ret0, _ := ret[0].(*models.User)
	return ret0
}

// GetUserByToken indicates an expected call of GetUserByToken.
func (mr *MockIUserRepositoryMockRecorder) GetUserByToken(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByToken", reflect.TypeOf((*MockIUserRepository)(nil).GetUserByToken), token)
}

// RevokeToken mocks base method.
func (m *MockIUserRepository) RevokeToken(user *models.User) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RevokeToken", user)
}

// RevokeToken indicates an expected call of RevokeToken.
func (mr *MockIUserRepositoryMockRecorder) RevokeToken(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeToken", reflect.TypeOf((*MockIUserRepository)(nil).RevokeToken), user)
}

// UpdateToken mocks base method.
func (m *MockIUserRepository) UpdateToken(user *models.User, token string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateToken", user, token)
}

// UpdateToken indicates an expected call of UpdateToken.
func (mr *MockIUserRepositoryMockRecorder) UpdateToken(user, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateToken", reflect.TypeOf((*MockIUserRepository)(nil).UpdateToken), user, token)
}

// UpdateUserLastActivity mocks base method.
func (m *MockIUserRepository) UpdateUserLastActivity(user *models.User) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateUserLastActivity", user)
}

// UpdateUserLastActivity indicates an expected call of UpdateUserLastActivity.
func (mr *MockIUserRepositoryMockRecorder) UpdateUserLastActivity(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserLastActivity", reflect.TypeOf((*MockIUserRepository)(nil).UpdateUserLastActivity), user)
}
