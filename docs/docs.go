// Code generated by swaggo/swag. DO NOT EDIT.

package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/active-users": {
            "get": {
                "description": "Get all active users",
                "summary": "Active users",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer"
                            }
                        }
                    },
                    "400": {
                        "description": "Error message",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/user": {
            "post": {
                "description": "Register user by userName and password",
                "summary": "Registration",
                "parameters": [
                    {
                        "description": "query params",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.CreateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.CreateUserResponse"
                        }
                    },
                    "400": {
                        "description": "Error message",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/user/login": {
            "post": {
                "description": "Login user by userName and password",
                "summary": "Login",
                "parameters": [
                    {
                        "description": "query params",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.LoginResponse"
                        }
                    },
                    "400": {
                        "description": "Error message",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/ws": {
            "get": {
                "description": "Open websocket connection for user by token",
                "summary": "Initialize chat",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User Token",
                        "name": "token",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        }
    },
    "definitions": {
        "handlers.CreateUserRequest": {
            "description": "Create user request",
            "type": "object",
            "properties": {
                "password": {
                    "description": "Password of existing user",
                    "type": "string"
                },
                "userName": {
                    "description": "UserName of existing user",
                    "type": "string"
                }
            }
        },
        "handlers.CreateUserResponse": {
            "description": "Response with registered user data",
            "type": "object",
            "properties": {
                "id": {
                    "description": "ID of new user",
                    "type": "integer"
                },
                "userName": {
                    "description": "UserName name of new user",
                    "type": "string"
                }
            }
        },
        "handlers.LoginRequest": {
            "description": "Login request",
            "type": "object",
            "properties": {
                "password": {
                    "description": "Password should be more than 4 chars",
                    "type": "string"
                },
                "userName": {
                    "description": "UserName should be available in the system",
                    "type": "string"
                }
            }
        },
        "handlers.LoginResponse": {
            "description": "Login response with websocket url",
            "type": "object",
            "properties": {
                "url": {
                    "description": "Url contains path to connect to websocket",
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "BasicAuth": {
            "type": "basic"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "2f4ek Lets Go Chat openAPI documentation",
	Description:      "Chat.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
